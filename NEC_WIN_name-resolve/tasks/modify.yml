---
  - name: set up
    setup:
    when: ansible_env is undefined

  - name: VAR_NEC_WIN_name_resolve_hosts is defined
    block:
      - name: check VAR_NEC_WIN_name_resolve_hosts.ip
        fail:
          msg: "The variable ip should be defined and cannot be NULL."
        when:
          - (outer_item_hosts.ip is undefined) or (outer_item_hosts.ip is none) or (outer_item_hosts.ip == '')

      - name: check VAR_NEC_WIN_name_resolve_hosts.hostname
        fail:
          msg: "The variable hostname should be defined and cannot be NULL."
        when: (outer_item_hosts.hostname is undefined) or (outer_item_hosts.hostname is none) or (outer_item_hosts.hostname == '')
    when: outer_item_hosts is defined

  - name: check VAR_NEC_WIN_name_resolve_dns
    block:
      - name: check VAR_NEC_WIN_name_resolve_dns.nic_name
        fail:
          msg: "The variable nic_name cannot be NULL."
        when:
          - outer_item_dns.nic_name is defined
          - (outer_item_dns.nic_name is none) or (outer_item_dns.nic_name == '')

      - name: check VAR_NEC_WIN_name_resolve_dns.servers
        fail:
          msg: "The variable servers should be defined and cannot be NULL."
        when: (outer_item_dns.servers is undefined) or (outer_item_dns.servers is none) or (outer_item_dns.servers == '')

      - name: check VAR_NEC_WIN_name_resolve_dns.suffix
        fail:
          msg: "The variable suffix cannot be NULL."
        when:
          - outer_item_dns.suffix is defined
          - (outer_item_dns.suffix is none) or (outer_item_dns.suffix == '')
    when: outer_item_dns is defined

  - name: set hosts
    win_lineinfile:
      path: '{{ ansible_env.SystemRoot }}\system32\drivers\etc\hosts'
      regexp: '^#?\s*{{ outer_item_hosts.ip | regex_escape() }}\s'
      line: "{{ outer_item_hosts.ip }} {{ outer_item_hosts.hostname }}"
    when: outer_item_hosts is defined

  - name: VAR_NEC_WIN_name_resolve_dns not null
    block:
    # set ret_interface
      - name: no nic
        block:
          - name: get interface name
            raw: (Find-NetRoute -RemoteIPAddress '{{ item.servers.0 }}')[0].InterfaceAlias
            register: ret_interface
            with_items: "{{VAR_NEC_WIN_name_resolve_dns}}"

            # changed dns
          - name: set disignation of dns server when no nic
            raw: Set-DnsClientServerAddress -InterfaceAlias "{{ item.0.stdout_lines.0 }}" -ServerAddresses "{{ item.1.servers | join(',') }}"
            with_together:
              - "{{ ret_interface.results }}"
              - "{{ VAR_NEC_WIN_name_resolve_dns }}"
            when:
              - item.0.changed

          - name: set suffix
            raw: Set-DnsClient -InterfaceAlias "{{ item.0.stdout_lines.0 }}" -ConnectionSpecificSuffix "{{ item.1.suffix }}"
            with_together:
              - "{{ ret_interface.results }}"
              - "{{ VAR_NEC_WIN_name_resolve_dns }}"
            when:
              - item.1.suffix is defined
              - item.0.changed
            failed_when: item.1.suffix == ""
        when: outer_item_dns.nic_name is undefined

      - name: has nic
        block:
          - name: get all nic name when has nic
            win_shell: "Get-NetAdapter | Format-List -Property Name"
            register: getNic

          - name: init nicList
            set_fact:
              nicList: ''

          - name: set list to nicList when has nic
            set_fact:
              nicList: "{{ [nicList,(item | lower)] | join('?') }}"
            with_items: "{{ getNic.stdout_lines }}"
            when: item != ''

          - name: fail if nic not existed when has nic
            fail:
              msg: "NIC {{ outer_item_dns.nic_name }} does not exist."
            when: "('name : ' + outer_item_dns.nic_name.lower()) not in nicList.split('?')"
        # changed dns
          - name: set disignation of dns server when has nic
            raw: Set-DnsClientServerAddress -InterfaceAlias "{{ outer_item_dns.nic_name }}" -ServerAddresses "{{ outer_item_dns.servers | join(',') }}"

          - name: set suffix
            raw: Set-DnsClient -InterfaceAlias "{{ outer_item_dns.nic_name }}" -ConnectionSpecificSuffix "{{ outer_item_dns.suffix }}"
            when: outer_item_dns.suffix is defined
        when:
          - outer_item_dns.nic_name is defined
          - outer_item_dns.nic_name is not none
          - outer_item_dns.nic_name != ''
    when: outer_item_dns is defined

