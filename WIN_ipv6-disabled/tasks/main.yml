---
# not check `COMPLIANCE020201` by ansible-lint
# not check `COMPLIANCE030206` by ansible-lint
  - name: set WIN_reboot_required
    set_fact:
      WIN_reboot_required: "{{ WIN_reboot_required | d(false) }}"

  - name: check param VAR_WIN_ipv6Disabled_tunnel
    fail:
      msg: "Parameter 'tunnel、tunnel6to4、tunnelIsatap、tunnelTeredo、native、preferIpv4、tunnelCp、tunnelIpTls' should be defined and must be bool type."
    when:
      - VAR_WIN_ipv6Disabled_tunnel is defined
      - (VAR_WIN_ipv6Disabled_tunnel.tunnel is undefined) or ((VAR_WIN_ipv6Disabled_tunnel.tunnel != True) and (VAR_WIN_ipv6Disabled_tunnel.tunnel != False ))or (VAR_WIN_ipv6Disabled_tunnel.tunnel6to4 is undefined) or ((VAR_WIN_ipv6Disabled_tunnel.tunnel6to4 != True) and (VAR_WIN_ipv6Disabled_tunnel.tunnel6to4 != False )) or (VAR_WIN_ipv6Disabled_tunnel.tunnelIsatap is undefined) or ((VAR_WIN_ipv6Disabled_tunnel.tunnelIsatap != True) and (VAR_WIN_ipv6Disabled_tunnel.tunnelIsatap != False )) or (VAR_WIN_ipv6Disabled_tunnel.tunnelTeredo is undefined) or ((VAR_WIN_ipv6Disabled_tunnel.tunnelTeredo != True) and (VAR_WIN_ipv6Disabled_tunnel.tunnelTeredo != False )) or (VAR_WIN_ipv6Disabled_tunnel.native is undefined) or ((VAR_WIN_ipv6Disabled_tunnel.native != True) and (VAR_WIN_ipv6Disabled_tunnel.native != False )) or (VAR_WIN_ipv6Disabled_tunnel.preferIpv4 is undefined) or ((VAR_WIN_ipv6Disabled_tunnel.preferIpv4 != True) and (VAR_WIN_ipv6Disabled_tunnel.preferIpv4 != False )) or (VAR_WIN_ipv6Disabled_tunnel.tunnelCp is undefined) or ((VAR_WIN_ipv6Disabled_tunnel.tunnelCp != True) and (VAR_WIN_ipv6Disabled_tunnel.tunnelCp != False )) or (VAR_WIN_ipv6Disabled_tunnel.tunnelIpTls is undefined) or ((VAR_WIN_ipv6Disabled_tunnel.tunnelIpTls != True) and (VAR_WIN_ipv6Disabled_tunnel.tunnelIpTls != False ))

  - name: check param VAR_WIN_ipv6Disabled_NICs
    block:
      - name: faile when param nicName undefined or is NULL
        fail:
          msg: "Parameter 'VAR_WIN_ipv6Disabled_NICs.nicName' should be defined and cannot be NULL."
        with_items: "{{ VAR_WIN_ipv6Disabled_NICs }}"
        when: "(item.nicName is undefined) or (item.nicName is none) or (item.nicName == '')"

      - name: fail when param nic state invalid
        fail:
          msg: "Parameter 'VAR_WIN_ipv6Disabled_NICs.state' should be defined and the value should be 'disabled' or 'enabled'."
        with_items: "{{ VAR_WIN_ipv6Disabled_NICs }}"
        when: "(item.state is undefined) or (item.state is none) or (item.state.lower() != 'disabled' and item.state.lower() != 'enabled')"

      - name: get all nic name
        win_shell: "Get-NetAdapter | Format-List -Property Name"
        register: getNic

      - name: init nicList
        set_fact:
          nicList: ''

      - name: set list to nicList
        set_fact:
          nicList: "{{ [nicList,(item | lower)] | join('?') }}"
        with_items: "{{ getNic.stdout_lines }}"
        when: item != ''

      - name: fail if nic not existed
        fail:
          msg: "NIC {{ item.nicName }} does not exist."
        with_items: "{{ VAR_WIN_ipv6Disabled_NICs }}"
        when: "('name : ' + item.nicName.lower()) not in nicList.split('?')"
    when:
      - VAR_WIN_ipv6Disabled_NICs is defined

  - name: set nics ipv6 disabled
    block:
      - name: disbled nic ipv6
        win_shell: "Disable-NetAdapterBinding -InterfaceAlias '{{ item.nicName }}' -ComponentID ms_tcpip6"
        with_items: "{{ VAR_WIN_ipv6Disabled_NICs }}"
        when: item.state.lower() == 'disabled'

      - name: enabled nic ipv6
        win_shell: "Enable-NetAdapterBinding -InterfaceAlias '{{ item.nicName }}' -ComponentID ms_tcpip6"
        with_items: "{{ VAR_WIN_ipv6Disabled_NICs }}"
        when: item.state.lower() == 'enabled'
    when:
      - VAR_WIN_ipv6Disabled_NICs is defined

  - name: Tunnelxx disabled
    block:
      - name: set data to list
        set_fact:
          data_list:
            - "{{ (VAR_WIN_ipv6Disabled_tunnel.tunnelIpTls == True) | ternary('1','0') }}"
            - "{{ (VAR_WIN_ipv6Disabled_tunnel.tunnelCp == True) | ternary('1','0') }}"
            - "{{ (VAR_WIN_ipv6Disabled_tunnel.preferIpv4 == True) | ternary('1','0') }}"
            - "{{ (VAR_WIN_ipv6Disabled_tunnel.native == True) | ternary('1','0') }}"
            - "{{ (VAR_WIN_ipv6Disabled_tunnel.tunnelTeredo == True) | ternary('1','0') }}"
            - "{{ (VAR_WIN_ipv6Disabled_tunnel.tunnelIsatap == True) | ternary('1','0') }}"
            - "{{ (VAR_WIN_ipv6Disabled_tunnel.tunnel6to4 == True) | ternary('1','0') }}"
            - "{{ (VAR_WIN_ipv6Disabled_tunnel.tunnel == True) | ternary('1','0') }}"

      - name: set string to int
        set_fact:
          data_str: "{{ data_list | join | int(base=2) }}"

      - name: set Tunnelxx disabled
        win_regedit:
          path: HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters
          name: DisabledComponents
          data: "{{ data_str }}"
          type: dword
        register: reg_modify

      - name: notify handlers
        set_fact:
        changed_when: true
        notify:
          - Run reboot command
          - Wait for connection down
          - Wait for connection up
        when:
          - reg_modify is changed
          - VAR_WIN_ipv6Disabled_reboot == true

      - name: fulsh handlers
        meta: flush_handlers

      - name: debug reboot message
        debug:
          msg: "Restart now: {{ VAR_WIN_ipv6Disabled_reboot }}"
        tags:
          - skip_ansible_lint

      - name: changed required value
        set_fact:
          WIN_reboot_required: "{{ not VAR_WIN_ipv6Disabled_reboot }}"
        when: reg_modify is changed
    when:
      - VAR_WIN_ipv6Disabled_tunnel is defined
      - VAR_WIN_ipv6Disabled_tunnel is not none

